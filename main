#1
class Elevator:
    def __init__(self,bottom_floors,top_floors):
        self.bottom_floors = bottom_floors
        self.top_floors = top_floors
        self.floors = bottom_floors
    def floor_up(self):
        if self.floors < self.top_floors:
            self.floors += 1
            print(f"Now {self.floors} floors. ")
    def floor_down(self):
        if self.floors > self.bottom_floors:
            self.floors -= 1
            print(f"Now {self.floors} floors. ")
    def go_to_floor(self,go_floor):
          if go_floor > self.floors:
              while self.floors < go_floor:
                  self.floor_up()
          if go_floor < self.floors:
              while self.floors > go_floor:
                  self.floor_down()

h = Elevator(1,10)
h.go_to_floor(5)
print("Back to the bottom floor:")
h.go_to_floor(1)


#2
class Elevator:
    def __init__(self,bottom_floors,top_floors):
        self.bottom_floors = bottom_floors
        self.top_floors = top_floors
        self.floors = bottom_floors
    def floor_up(self):
        if self.floors < self.top_floors:
            self.floors += 1
            print(f"Now {self.floors} floors. ")
    def floor_down(self):
        if self.floors > self.bottom_floors:
            self.floors -= 1
            print(f"Now {self.floors} floors. ")

    def go_to_floor(self,go_floor):
          if go_floor > self.floors:
              while self.floors < go_floor:
                  self.floor_up()
          if go_floor < self.floors:
              while self.floors > go_floor:
                  self.floor_down()

class Building(Elevator):
    def __init__(self,bottom_floors,top_floors,number_elevators):
        self.bottom_floors = bottom_floors
        self.top_floors = top_floors
        self.floors = bottom_floors
        self.number_elevators = []
        for elevators in range(number_elevators):
            self.number_elevators.append(Elevator(bottom_floors,top_floors))

    def run_elevator(self,number_of_elevator,destination_floor):
        if number_of_elevator <= len(self.number_elevators):
            self.go_to_floor(destination_floor)
        else:
            print("Wrong elevator number.")

building = Building(1,5,5)
building.run_elevator(1, 3)


#3
class Elevator:
    def __init__(self,bottom_floors,top_floors):
        self.bottom_floors = bottom_floors
        self.top_floors = top_floors
        self.floors = bottom_floors
    def floor_up(self):
        if self.floors < self.top_floors:
            self.floors += 1
            print(f"Now {self.floors} floors. ")
    def floor_down(self):
        if self.floors > self.bottom_floors:
            self.floors -= 1
            print(f"Now {self.floors} floors. ")

    def go_to_floor(self,go_floor):
          if go_floor > self.floors:
              while self.floors < go_floor:
                  self.floor_up()
          if go_floor < self.floors:
              while self.floors > go_floor:
                  self.floor_down()

class Building(Elevator):
    def __init__(self,bottom_floors,top_floors,number_elevators):
        self.bottom_floors = bottom_floors
        self.top_floors = top_floors
        self.floors = bottom_floors
        self.number_elevators = []
        for elevators in range(number_elevators):
            self.number_elevators.append(Elevator(bottom_floors,top_floors))

    def run_elevator(self,number_of_elevator,destination_floor):
        if number_of_elevator <= len(self.number_elevators):
            self.go_to_floor(destination_floor)
        else:
            print("Wrong elevator number.")

    def fire_alarm(self):
        for elevator in self.number_elevators:
            elevator.go_to_floor(1)

building = Building(1,5,5)
building.run_elevator(1, 3)
building.run_elevator(3, 4)
building.fire_alarm()


#4
import random
from tabulate import tabulate

class Car:
    def __init__(self, registration_number, maximum_speed, current_speed, travelled_distance):
        self.registration_number = registration_number
        self.maximum_speed = maximum_speed
        self.current_speed = current_speed
        self.travelled_distance = travelled_distance

    def accelerate(self, change_of_speed):
        self.current_speed = self.current_speed + change_of_speed

    def drive(self, hours):
        self.travelled_distance = self.travelled_distance + self.current_speed * hours
        return self.travelled_distance

class Race:
    def __init__(self, name, distance, car_list):
        self.name = name
        self.distance = distance
        self.car_list = car_list

    def hour_passes(self, n):
        for _ in range(n):
            for car in self.car_list:
                car.accelerate(random.randint(0, 100))
                car.drive(1)

    def print_status(self):
        car_data = [[car.registration_number, car.travelled_distance] for car in self.car_list]
        headers = ["Car Name", "Travelled Distance (km)"]
        table = tabulate(car_data, headers, tablefmt="pretty")
        print(table)

    def race_finished(self):
        for car in self.car_list:
            if car.travelled_distance >= self.distance:
                return True
        return False

cars = []
i = 1
while i <= 10:
    cars.append(Car(f"ABC-{i}", random.randint(100, 200), 0, 0))
    i += 1
gdd = Race("Grand Demolition Derby", 8000, cars)

hours_passed = 0
while not gdd.race_finished():
    gdd.hour_passes(1)
    hours_passed += 1

    if hours_passed % 10 == 0:
        print(f"\nRace Status after {hours_passed} hours:")
        gdd.print_status()

print("\nRace Finished! Final Status:")
gdd.print_status()




